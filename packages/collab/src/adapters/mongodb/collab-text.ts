import { ObjectId } from 'mongodb';
import { RevisionChangeset } from '../../records/revision-changeset';
import { Changeset } from '../../changeset/changeset';
import { Record } from '../../records/revision-records';

export interface SelectionRange {
  start: number;
  end?: number;
}

export interface RevisionRecord<T = Changeset> extends Record<T> {
  /**
   * User who created this record.
   */
  creatorUserId: ObjectId;
  /**
   * A random ID generated by client when record is created.
   * Used for preventing duplicate submission.
   */
  userGeneratedId: string;
  beforeSelection: SelectionRange;
  afterSelection: SelectionRange;
}

export interface CollabText<T = Changeset> {
  headText: RevisionChangeset<T>;
  tailText: RevisionChangeset<T>;
  records: RevisionRecord<T>[];
}

interface CreateNewTextParams {
  initalText: string;
  creatorUserId: ObjectId;
  userGeneratedId: string;
}

export function createNewText({
  initalText,
  creatorUserId,
  userGeneratedId,
}: CreateNewTextParams): CollabText {
  const changeset = Changeset.fromInsertion(initalText);
  return {
    headText: {
      revision: 0,
      changeset,
    },
    tailText: {
      revision: -1,
      changeset: Changeset.EMPTY,
    },
    records: [
      {
        creatorUserId,
        userGeneratedId,
        revision: 0,
        changeset,
        beforeSelection: {
          start: 0,
        },
        afterSelection: {
          start: initalText.length,
        },
      },
    ],
  };
}

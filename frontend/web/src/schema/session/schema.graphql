type LocalSession {
  "Generated id for local session"
  id: ID!
  "Displayed name"
  displayName: String!
}

# eslint-disable-next-line @graphql-eslint/strict-id-in-types
type RemoteSession {
  "Index of session stored in http-only cookie"
  cookieIndex: Int!
  # eslint-disable-next-line @graphql-eslint/require-description
  displayName: String!
  "Email tied to current session"
  email: String!
}

input RemoteSessionInput {
  cookieIndex: Int!
  displayName: String!
  email: String!
}

union ClientSession = LocalSession | RemoteSession

extend type Query {
  "Session information stored on client-side. Both local and remote sessions"
  clientSessions: [ClientSession!]!
  "Active session. If no session exists, a new local session is created."
  activeClientSessionIndex: Int!
}

extend type Mutation {
  "Creates new local session with provided display name. Returns session index."
  createLocalSession(displayName: String!): Int!
  "Call this mutation after successful remote sign in. Returns session index."
  createRemoteSession(input: RemoteSessionInput!): Int!

  "Switch client session and returns switched to session index."
  switchToClientSession(index: Int!): Boolean!
  "Deletes client session and returns deleted session ID"
  deleteClientSession(index: Int!): Boolean!
}

################################ UserNoteLink ################################

"Identifier for UserNoteLink.id, serializes to string"
scalar UserNoteLinkID

"""
Link (edge) between signed in user and note.
"""
type UserNoteLink implements Node {
  "Note.id:User.id"
  id: ID!
  "Note that the user can access"
  note: Note!
  "UserNoteLink data that might be accessed by other users"
  public: PublicUserNoteLink!
}

type PublicUserNoteLink {
  "Self-descriptive"
  id: ID!
  "Public user who can access the note"
  user: PublicUser!
  "User is owner of the note"
  isOwner: Boolean!
  "Access to note is read-only. User cannot modify note."
  readOnly: Boolean!
}

extend type Note {
  "All users who can access the note."
  users: [PublicUserNoteLink!]!
}

################################ Mutation createNote ################################

input CreateUserNoteLinkInput

extend input CreateNoteInput {
  userNoteLink: CreateUserNoteLinkInput
}

extend type CreateNotePayload {
  "Created link to a new note"
  userNoteLink: UserNoteLink!
}

################################ Mutation deleteNote ################################

extend type DeleteNoteInput {
  "Delete note from specified user. If not defined then current user is used. Current user must be note owner."
  userId: ObjectID
}

extend type DeleteNotePayload {
  "Deleted UserNoteLink.id"
  userNoteLinkId: String
  "Deleted PublicUserNoteLink.id"
  publicUserNoteLinkId: String
}

################################ Query userNoteLink,userNoteLinkConnection,userNoteLinkSearchConnection ################################

type UserNoteLinkConnection implements Connection {
  "Notes directly without edges"
  userNoteLinks: [UserNoteLink!]!
  "Self descriptive"
  edges: [UserNoteLinkEdge!]!
  "Self descriptive"
  pageInfo: PageInfo!
}

type UserNoteLinkEdge implements Edge {
  "Self descriptive"
  node: UserNoteLink!
  "Self descriptive"
  cursor: Cursor!
}

input UserNoteLinkByInput @oneOf {
  "UserNoteLink.id"
  id: UserNoteLinkID
  "UserNoteLink.id"
  userNoteLinkId: UserNoteLinkID
  "userNoteLink.note.id"
  noteId: ObjectID
}

extend type Query {
  "Find UserNoteLink by Note.id"
  userNoteLink(by: UserNoteLinkByInput!): UserNoteLink! @auth
  "Paginate UserNoteLinks by category. Default is NoteCategory.DEFAULT"
  userNoteLinkConnection(
    first: NonNegativeInt
    after: ObjectID
    last: NonNegativeInt
    before: ObjectID
    category: NoteCategory
  ): UserNoteLinkConnection! @auth
  "Search for UserNoteLinks by text"
  userNoteLinkSearchConnection(
    searchText: String!
    first: NonNegativeInt
    after: String
    last: NonNegativeInt
    before: String
  ): UserNoteLinkConnection! @auth
}

################################ Mutation updateUserNoteLinkReadOnly ################################

input UpdateUserNoteLinkReadOnlyInput {
  "Target Note.id"
  noteId: ObjectID!
  "Specified note user. If not defined then current user is used. Current user must be note owner."
  userId: ObjectID
  "New PublicUserNoteLink.readOnly value for PublicUser.id"
  readOnly: Boolean!
}

type UpdateUserNoteLinkReadOnlyPayload {
  "New PublicUserNoteLink.readOnly value"
  readOnly: Boolean!
  "Affected PublicUserNoteLink"
  publicUserNoteLink: PublicUserNoteLink!
  "Related Note"
  note: Note!
}

extend type Mutation {
  "Change user note permissions"
  updateUserNoteLinkReadOnly(
    input: UpdateUserNoteLinkReadOnlyInput!
  ): UpdateUserNoteLinkReadOnlyPayload!
}

extend union SignedInUserMutation = UpdateUserNoteLinkReadOnlyPayload

################################ Mutation updateUserNoteLinkBackgroundColor ################################

extend type UserNoteLink {
  "Note preferences for visual appearance"
  preferences: NotePreferences
}

extend input CreateUserNoteLinkInput {
  preferences: NotePreferencesInput
}

type NotePreferences {
  "Note background color"
  backgroundColor: HexColorCode
}

input NotePreferencesInput {
  backgroundColor: HexColorCode
}

input UpdateUserNoteLinkBackgroundColorInput {
  "UserNoteLink to be updated by Note.id"
  noteId: ObjectID!
  "New background color value"
  backgroundColor: HexColorCode!
}

type UpdateUserNoteLinkBackgroundColorPayload {
  "Direct access to new background color"
  backgroundColor: HexColorCode!
  "UserNoteLink after new background color is applied"
  userNoteLink: UserNoteLink!
}

extend type Mutation {
  "Update note preferences backgroundColor"
  updateUserNoteLinkBackgroundColor(
    input: UpdateUserNoteLinkBackgroundColorInput!
  ): UpdateUserNoteLinkBackgroundColorPayload! @auth
}

extend union SignedInUserMutation = UpdateUserNoteLinkBackgroundColorPayload

################################ Mutation trashUserNoteLink ################################

extend type UserNoteLink {
  "UserNoteLink is marked for deletion and will no longer be available after this date."
  deletedAt: DateTime
}

input TrashUserNoteLinkInput {
  "Note to be trashed by Note.id"
  noteId: ObjectID!
}

type TrashUserNoteLinkPayload {
  "Time when note is permanently deleted from trash"
  deletedAt: DateTime!
  "UserNoteLink after it's been trashed."
  userNoteLink: UserNoteLink!
}

extend type Mutation {
  "Trash note by Note.id. It can still be recovered by moving it out of trash"
  trashUserNoteLink(input: TrashUserNoteLinkInput!): TrashUserNoteLinkPayload! @auth
}

extend union SignedInUserMutation = TrashUserNoteLinkPayload

################################ Mutation moveUserNoteLink ################################

extend type UserNoteLink {
  "Category where note belongs"
  categoryName: NoteCategory!
}

extend input CreateUserNoteLinkInput {
  categoryName: NoteCategory
}

"""
All note categories
"""
enum NoteCategory {
  DEFAULT
  STICKY
  ARCHIVE
  TRASH
}

"""
Notes in these categories can be moved/reordered
"""
enum MovableNoteCategory {
  DEFAULT
  STICKY
  ARCHIVE
}

enum ListAnchorPosition {
  AFTER
  BEFORE
}

"""
Move notes between categories or within category using anchor note
"""
input NoteLocationInput {
  "Category where to put or keep the note."
  categoryName: MovableNoteCategory!
  """
  Note.id to be defined as anchor.
  If anchor note doesn't exist then anchor is ignored and note is appended to the end.
  """
  anchorNoteId: ObjectID
  "How note is moved relative to anchor note"
  anchorPosition: ListAnchorPosition
}

type NoteLocation {
  "Note category after moving"
  categoryName: MovableNoteCategory!
  "Anchor note after moving"
  anchorUserNoteLink: UserNoteLink
  "How note is positioned relative to anchorNote. Default is BEFORE"
  anchorPosition: ListAnchorPosition
}

input MoveUserNoteLinkInput {
  "Note to be moved by Note.id"
  noteId: ObjectID!
  "Specify how to move the note. Null location can be used to move note out of trash back to original category."
  location: NoteLocationInput
}

type MoveUserNoteLinkPayload {
  "How note was moved"
  location: NoteLocation!
  "UserNoteLink after the move"
  userNoteLink: UserNoteLink!
}

extend type Mutation {
  "Move note between categories or reorder within categories"
  moveUserNoteLink(input: MoveUserNoteLinkInput!): MoveUserNoteLinkPayload! @auth
}

extend union SignedInUserMutation = MoveUserNoteLinkPayload

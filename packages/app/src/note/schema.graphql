"""
TODO desc
"""
scalar CollabService

"""
TODO desc
"""
scalar NoteTextFieldEditor

"""
TODO desc
"""
enum NoteTextFieldName {
  CONTENT
  TITLE
}

extend type Query {
  """
  Direct access to Note type.

  Usable only on client side.
  """
  note(by: NoteByInput!): Note!
  """
  Direct access to a UserNoteLink type.

  Usable only on client side.
  """
  userNoteLink(by: UserNoteLinkByInput!): UserNoteLink!
}

extend type UserNoteLink {
  """
  Note category before it was trashed
  """
  originalCategoryName: MovableNoteCategory
  """
  An outdated note might have been deleted or moved to another category.
  Note is still kept until app is online.
  """
  outdated: Boolean!
}

extend type Note {
  """
  Operation responsible for creating this note on the server.
  """
  createOperation: ApolloOperation
  """
  Service responsible for managing collaborative text
  """
  collabService: CollabService!
  """
  Note text fields derived from collabText
  """
  textField(name: NoteTextFieldName!): NoteTextField!
  """
  Note is only used on the device locally. No network requests are made.
  """
  localOnly: Boolean!
}

"""
TODO desc
"""
type NoteTextField {
  """
  Read-only text value
  """
  value: String!
  """
  An editor for mutating the field value
  """
  editor: NoteTextFieldEditor!
}

extend type User {
  """
  All locally available notes
  """
  allNoteLinks: [UserNoteLink!]!
}

################################ LocalUser.pendingNotes ################################

"""
TODO desc
"""
enum NotePendingStatus {
  """
  An empty note that can be used to start creating a new note
  """
  EMPTY
  """
  Note creation is being submitted to the server.
  Submitting note will have `localNoteId` as context variable in the mutation.
  It will be used in mutation update function to copy state from local to remote note.
  """
  SUBMITTING
  """
  Note has been submitted to the server and creation is done
  """
  DONE
  """
  A local note that is being converted to a remote one
  """
  CONVERTING
}

extend type UserNoteLink {
  """
  TODO desc
  """
  pendingStatus: NotePendingStatus
  """
  Note is in the list to retain its position but not displayed to the user.
  """
  hiddenInList: Boolean!
}

# extend type UserNoteLinkEdge {
#   """
#   Edge location in array is unknown and needs to be queried.
#   It could also have been deleted or moved to another category.
#   """
#   locationUnknown: Boolean!
#   """
#   Edge is hidden due to latest query first/last arg not including this item
#   Note should be displayed when app goes offline.
#   """
#   hidden: Boolean!
# }

extend type LocalUser {
  """
  A list of notes tied to creating new notes.
  Each note should have non-null field `pendingStatus`.
  """
  pendingNotes: [UserNoteLink!]!
  """
  A outdated note might have been deleted or moved to another category.
  Oudated note is kept in last known category until more information is available.
  These notes need to be
  """
  outdatedNotes: [UserNoteLink!]!
}

################################ LocalUser.unsavedCollabServices ################################

extend type LocalUser {
  """
  List of notes that has CollabService with either local or unsubmitted changes.
  These notes must be synchronized with the server.
  """
  unsavedCollabServices: [UserNoteLink!]!
}

################################ UserOperation ################################

"""
Invoke mutation `DeleteNote`
"""
type DeleteNoteUserOperation implements UserOperation {
  """
  TODO desc
  """
  id: ID!
  """
  TODO desc
  """
  userNoteLink: UserNoteLink!
}

"""
Invoke mutation `TrashNote`
"""
type TrashNoteUserOperation implements UserOperation {
  """
  TODO desc
  """
  id: ID!
  """
  TODO desc
  """
  userNoteLink: UserNoteLink!
}

"""
Invoke mutation `MoveNote`
"""
type MoveNoteUserOperation implements UserOperation {
  """
  TODO desc
  """
  id: ID!
  """
  TODO desc
  """
  userNoteLink: UserNoteLink!
  """
  TODO desc
  """
  location: NoteLocation
}

################################ OpenedNote ################################

extend type OpenedNote {
  """
  OpenedNote is active when user is present.
  Using OpenedNote type to store last known selection even when note is not open.
  """
  active: Boolean!
}

import { Changeset, SerializedChangeset } from '../changeset/changeset';

export interface RevisionChangeset<T = Changeset> {
  revision: number;
  changeset: T;
}

export type SerializedRevisionChangeset = RevisionChangeset<SerializedChangeset>;

export type RevisionRecord<T = Changeset> = RevisionChangeset<T>;

export interface SelectionRange {
  start: number;
  end?: number;
}

/**
 * Record submitted by the client
 */
export interface SubmittedRevisionRecord<T = Changeset> extends RevisionRecord<T> {
  /**
   * A random ID generated by the client when record is created.
   * Used for preventing duplicate submissions.
   */
  userGeneratedId: string;
  /**
   * Selection before this record is composed
   */
  beforeSelection: SelectionRange;
  /**
   * Selection after this record is composed
   */
  afterSelection: SelectionRange;
}

/**
 * Record processed by the server.
 */
export interface ServerRevisionRecord<T = Changeset> extends SubmittedRevisionRecord<T> {
  creatorUserId: string;
}

#!/bin/bash

load_env() {
  # Default NODE_ENV if not set
  NODE_ENV=${NODE_ENV:-development}

  cd $script_dir/../../../

  # Array of env files in priority order (lowest first)
  env_files=(
    ".env"
    ".env.local"
    ".env.$NODE_ENV"
    ".env.$NODE_ENV.local"
  )

  echo "Loading environment variables..."

  # Loop over each file and source it if it exists
  for file in "${env_files[@]}"; do
    if [ -f "$file" ]; then
      echo "Loading $file"
      source "$file"
    fi
  done  

  cd $script_dir
}

is_truthy() {
  case "${1,,}" in
    true|1|yes|y|on)
      return 0
      ;;
    *)
      return 1
      ;;
  esac
}

# Function to create the secret to Secrets Manager
create_secret() {
  if ! aws secretsmanager describe-secret --secret-id "$secret_name" --region "$SM_REGION" > /dev/null 2>&1; then
    if [ ! -f "$secret_key_file" ]; then
      echo "Secret key file '$secret_key_file' does not exist. Aborting creation!"
      exit 1
    fi

    echo "Secret does not exist. Creating secret..."
    # File containing the JSON with the Atlas keys (PublicKey + PrivateKey)
    # Format { "PublicKey": "<public key value>", "PrivateKey": "<private key value>" }  
    aws secretsmanager create-secret \
      --name "$secret_name" \
      --region "$SM_REGION" \
      --description "MongoDB Atlas API key for CDK deployment." \
      --secret-string file://"$secret_key_file"
    echo "Secret created."      

    secret_arn=$(aws secretsmanager describe-secret --secret-id "$secret_name" --region "$SM_REGION" --query ARN --output text)
    iam_policy=$(jq --arg arn "$secret_arn" '.Statement[].Resource = [$arn]' ../templates/secret-atlas-api-key-policy.json)

    echo "Updating secret ARN in role $CL_SM_ROLE_NAME, policy $CL_SM_ROLE_POLICY..."
    aws iam put-role-policy \
      --role-name $CL_SM_ROLE_NAME \
      --policy-name $CL_SM_ROLE_POLICY \
      --policy-document "$iam_policy"
    echo "Policy updated."

  else
    echo "Secret already exists. No action needed."
  fi
}

# Function to delete the secret from Secrets Manager
delete_secret() {
  if [ ! -f "$secret_key_file" ]; then
    echo "Secret key file '$secret_key_file' does not exist. Refusing to delete without a backup!"
    exit 1
  fi

  if aws secretsmanager describe-secret --secret-id "$secret_name" --region "$SM_REGION" > /dev/null 2>&1; then
    echo "Deleting secret..."
    aws secretsmanager delete-secret \
      --secret-id "$secret_name" \
      --region "$SM_REGION" \
      --force-delete-without-recovery
    echo "Secret deleted."
  else
    echo "Secret not found. Nothing to delete."
  fi
}

####################################################
################### Main logic #####################
####################################################

script_dir=$(readlink -f $(dirname "$0"))

load_env

secret_name="cfn/atlas/profile/$MONGODB_ATLAS_PROFILE"
secret_key_file="$script_dir/../../../$SECRET_KEY_FILE"

if ! $(is_truthy "$AWS_CDK"); then
  echo "AWS_CDK is not enabled. Aborting!"
  exit 1
fi

if [ "$1" == "create" ]; then
  if ! $(is_truthy "$CREATE_ATLAS_API_SECRET"); then
    echo "CREATE_ATLAS_API_SECRET is not enabled. Skipping secret creation."
    exit 0
  fi

  create_secret

elif [ "$1" == "delete" ]; then
  if ! $(is_truthy "$DELETE_ATLAS_API_SECRET"); then
    echo "DELETE_ATLAS_API_SECRET is not enabled. Skipping secret deletion."
    exit 0
  fi

  delete_secret

else
  echo "Usage: $0 {create|delete}"
  exit 1
fi
################################ Note collab ################################

enum NoteTextField {
  TITLE
  CONTENT
}

extend type Note {
  "Note collaboration"
  collab: NoteCollab!
}

extend input CreateNoteInput {
  "Initial note collaboration values"
  collab: CreateNoteCollabInput
}

"Note collaborative info"
type NoteCollab {
  "All available text fields. If arg: name is defined then only that field is returned."
  textFields(name: NoteTextField): [NoteTextFieldEntry!]!
}

input CreateNoteCollabInput {
  "Initial note text fields"
  textFields: [CreateNoteTextFieldEntryInput!]
}

input CreateNoteTextFieldEntryInput {
  "Type of text field"
  key: NoteTextField!
  "Actual value of text field"
  value: CreateCollabTextInput!
}

type NoteTextFieldEntry {
  "Type of text field"
  key: NoteTextField!
  "Actual value of text field"
  value: CollabText!
}

################################ updateNoteTextFieldInsertRecord ################################

input UpdateNoteTextFieldInsertRecordInput {
  "Note to be updated by Note.id"
  noteId: ObjectID!
  "Text field where to insert record"
  textField: NoteTextField!
  "New record to be inserted"
  insertRecord: CollabTextRecordInput!
}

type UpdateNoteTextFieldInsertRecordPayload {
  """
  New record added to text field. Could be a duplicate record. Check isDuplicateRecord field.
  """
  newRecord: CollabTextRecord!
  "True if record has already been inserted before. Is always false in subscription."
  isDuplicateRecord: Boolean!
  "Text field that was updated"
  textField: NoteTextField!
  "CollabText after new record is inserted"
  collabText: CollabText!
  "Note after new record is inserted"
  note: Note!
}

extend type Mutation {
  "Insert new record to text field"
  updateNoteTextFieldInsertRecord(
    input: UpdateNoteTextFieldInsertRecordInput!
  ): UpdateNoteTextFieldInsertRecordPayload! @auth
}

extend union SignedInUserMutations = UpdateNoteTextFieldInsertRecordPayload
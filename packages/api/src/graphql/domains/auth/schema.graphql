################################ Mutation signIn ################################

interface AuthProviderUser {
  "User ID"
  id: ID!
  "User email. Not stored in database and only available with signIn payload."
  email: String!
}

input SignInAuthInput @oneOf

input SignInInput {
  auth: SignInAuthInput!
}

interface SignInResult {
  "Signed in user"
  signedInUser: SignedInUser!
  "SignedInUser.id's"
  availableUserIds: [String!]!
}

type JustSignedInResult implements SignInResult {
  "Just signed in user"
  signedInUser: SignedInUser!
  "Available SignedInUser.id's after sign in"
  availableUserIds: [String!]!
  "User info from auth provider"
  authProviderUser: AuthProviderUser!
}

type AlreadySignedInResult implements SignInResult {
  "Current already signed in user"
  signedInUser: SignedInUser!
  "Current available SignedInUser.id's"
  availableUserIds: [String!]!
}
union SignInPayload = JustSignedInResult | AlreadySignedInResult

extend type Mutation {
  "Sign in using an auth provider"
  signIn(input: SignInInput!): SignInPayload!
}

################################ Mutation signIn - GOOGLE ################################

input GoogleSignInAuthInput {
  "JSON Web Token"
  token: String!
}

extend input SignInAuthInput {
  google: GoogleSignInAuthInput
}

type GoogleAuthProviderUser implements AuthProviderUser {
  "JWT payload field 'sub'"
  id: ID!
  "JWT payload field 'email'"
  email: String!
}

################################ Mutation signOut ################################

input SignOutInput {
  "Sign out all known users. Field 'userId' is ignored when 'allUsers' is true"
  allUsers: Boolean
  "Sign out a specific user by SignedInUser.id. If userId is not specified currently authenticated user is signed out."
  userId: ObjectID
}

type SignOutPayload {
  "SignedInUser.id's that were signed out."
  signedOutUserIds: [String!]!
  "Available SignedInUser.id's after sign out."
  availableUserIds: [String!]!
}

extend type Mutation {
  "Sign out a user"
  signOut(input: SignOutInput): SignOutPayload!
}

################################ Mutation syncSessionCookies ################################

input SyncSessionCookiesInput {
  "Available user ids provided by the client"
  availableUserIds: [String!]!
}

type SyncSessionCookiesPayload {
  "User ids available in http-only cookies. Any other user id is expired."
  availableUserIds: [String!]!
}

extend type Mutation {
  "Synchronize http-only session cookies. Only sessions available both in client and server are kept."
  syncSessionCookies(input: SyncSessionCookiesInput!): SyncSessionCookiesPayload!
}

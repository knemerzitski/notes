################################ Note collabText ################################

extend type Note {
  """
  Note collaboration text
  """
  collabText: CollabText!
}

extend input CreateNoteInput {
  """
  Initial note collaboration values
  """
  collabText: CreateCollabTextInput
}

extend type CreateNotePayload {
  """
  TODO desc
  """
  collabText: CollabText
  """
  TODO desc
  """
  firstCollabTextRecord: CollabTextRecord
}

################################ updateNoteInsertRecord ################################

"""
TODO desc
"""
input UpdateNoteInsertRecordInput {
  """
  Authenticated user who is inserting the record
  """
  authUser: UserByInput!
  """
  Note to be updated
  """
  note: NoteByInput!
  """
  New record to be inserted
  """
  insertRecord: CollabTextRecordInput!
}

"""
TODO desc
"""
type UpdateNoteInsertRecordPayload {
  """
  New record added to text field. Could be a duplicate record. Check isDuplicateRecord field.
  """
  newRecord: CollabTextRecord!
  """
  True if record has already been inserted before. Is always false in subscription.
  """
  isDuplicateRecord: Boolean!
  """
  CollabText after new record is inserted
  """
  collabText: CollabText!
  """
  Note after new record is inserted
  """
  note: Note!
}

extend type Mutation {
  """
  Insert new record to note
  """
  updateNoteInsertRecord(
    input: UpdateNoteInsertRecordInput!
  ): UpdateNoteInsertRecordPayload! @auth(userId: { args: "input.authUser" })
}

extend union SignedInUserMutation = UpdateNoteInsertRecordPayload

################################ OpenedNote ################################

"""
A note that has been opened
"""
type OpenedNote {
  """
  Time when note is automatically closed due to not receiving any updates.
  """
  closedAt: DateTime!
}

extend type PublicUserNoteLink {
  """
  Information about this note being opened. Is null if note is not open.
  Note is opened when subscribing to `openNoteEvents`.
  """
  open: OpenedNote
}

################################ Subscription openNoteEvents ################################
"""
TODO desc
"""
union OpenNoteMutation

"""
TODO desc
"""
input OpenNoteEventsInput {
  """
  Authenticated user who is subscribing to open note events
  """
  authUser: UserByInput!
  """
  Target note of the events
  """
  note: NoteByInput!
}

"""
TODO desc
"""
type OpenNoteEventsPayload {
  """
  Self-descriptive
  """
  mutations: [OpenNoteMutation!]
}

extend type Subscription {
  """
  Subscribe to all events that are relevant to a opened note
  """
  openNoteEvents(input: OpenNoteEventsInput!): OpenNoteEventsPayload!
    @auth(userId: { args: "input.authUser" })
}

################################ Events User Subscribed/Unsubscribed ################################

"""
TODO desc
"""
type OpenNoteUserSubscribedEvent {
  """
  User link to subscribed note
  """
  publicUserNoteLink: PublicUserNoteLink!
  """
  This user is subscribed to open note events. `publicUserNoteLink.user`
  """
  user: User!
  """
  Affected Note
  """
  note: Note!
}

"""
TODO desc
"""
type OpenNoteUserUnsubscribedEvent {
  """
  User link to subscribed note
  """
  publicUserNoteLink: PublicUserNoteLink!
  """
  This user is no longer subscribed to open note events.
  """
  user: User!
  """
  Affected Note
  """
  note: Note!
}

extend union SignedInUserMutation =
  | OpenNoteUserSubscribedEvent
  | OpenNoteUserUnsubscribedEvent

################################ CollabTextEditing ################################

"""
A state thats needed when CollabText is being edited by a user
"""
type CollabTextEditing {
  """
  latestSelection applies to text at this revision
  """
  revision: NonNegativeInt!
  """
  Latest updated selection range
  """
  latestSelection: CollabTextSelectionRange!
}

extend type OpenedNote {
  """
  User CollabText editing state when note is opened.
  """
  collabTextEditing: CollabTextEditing
}

################################ Mutation updateOpenNoteSelectionRange ################################

"""
TODO desc
"""
input UpdateOpenNoteSelectionRangeInput {
  """
  Authenticated use who is updating the selection range
  """
  authUser: UserByInput!
  """
  Target note
  """
  note: NoteByInput!
  """
  Selection applies to this revision of text
  """
  revision: NonNegativeInt!
  """
  New selection range
  """
  selectionRange: CollabTextSelectionRangeInput!
}

"""
TODO desc
"""
type UpdateOpenNoteSelectionRangePayload {
  """
  Updated CollabTextEditing. `openedNote.collabTextEditing`
  """
  collabTextEditing: CollabTextEditing!
  """
  Opened note that's been updated. `publicUserNoteLink.open`.
  """
  openedNote: OpenedNote!
  """
  Self-descriptive. Item in `note.users`
  """
  publicUserNoteLink: PublicUserNoteLink!
  """
  Self-descriptive
  """
  collabText: CollabText!
  """
  The open note
  """
  note: Note!
}

extend type Mutation {
  """
  Update selection of opened note
  """
  updateOpenNoteSelectionRange(
    input: UpdateOpenNoteSelectionRangeInput!
  ): UpdateOpenNoteSelectionRangePayload!
}

extend union OpenNoteMutation = UpdateOpenNoteSelectionRangePayload

extend union SignedInUserMutation = UpdateOpenNoteSelectionRangePayload

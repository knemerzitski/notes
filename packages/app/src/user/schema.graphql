################################ User ################################

"""
TODO desc
"""
enum AuthProviderUserType {
  GOOGLE
}

extend type User {
  """
  Always mutable subtype of User even when it has data from optimistic response
  """
  local: LocalSignedInUser!
  """
  User email. This is stored only on client-side during sign-in and not in the server.
  """
  email: String!
  """
  Find a provider by type
  """
  authProviderUser(type: AuthProviderUserType!): AuthProviderUser
  """
  Known providers that have been used to sign in
  """
  authProviderUsers: [AuthProviderUser!]!
  """
  User is only used on the device locally. No network requests are made.
  """
  localOnly: Boolean!
}

extend type Query {
  """
  List of all available users. Always includes localUser.
  """
  signedInUsers(localOnly: Boolean): [User!]!

  """
  Currently selected user. All operations are executed using scope of this user. Defaults to localUser.
  """
  currentSignedInUser: User!

  """
  Always available local user
  """
  localUser: User!
}

################################ LocalSignedInUser ################################

"""
User state that can always be modified with writeQuery/writeFragemt and
it will be reflected in UI regardless of optimistic responses.
"""
type LocalSignedInUser {
  """
  User.id
  """
  id: ID!
  """
  Current session has expired and is unusable. Must sign in again.
  """
  sessionExpired: Boolean!
}

################################ LocalSignedInUser.messages ################################

"""
TODO desc
"""
enum UserMessageType {
  ERROR
  WARNING
}

"""
TODO desc
"""
type UserMessage {
  """
  TODO desc
  """
  id: ID!
  """
  TODO desc
  """
  type: UserMessageType!
  """
  TODO desc
  """
  text: String!
}

extend type LocalSignedInUser {
  """
  TODO desc
  """
  messages: [UserMessage!]!
}

################################ LocalSignedInUser.operations ################################

"""
TODO desc
"""
interface UserOperation {
  """
  TODO desc
  """
  id: ID!
}

extend type LocalSignedInUser {
  """
  Operations that need to be processed.
  """
  operations: [UserOperation!]!
}

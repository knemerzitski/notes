scalar Changeset

type RevisionChangeset {
  "Revision number"
  revision: NonNegativeInt!
  "A set of text changes"
  changeset: Changeset!
}

input RevisionChangesetInput {
  "Changeset applies to document at this revision"
  revision: NonNegativeInt!
  "New changes to be applied to the document"
  changeset: Changeset!
}

type CollaborativeDocumentSelectionRange {
  "Start index of selection"
  start: NonNegativeInt!
  "End index of selection. If null then start === end."
  end: NonNegativeInt
}

input CollaborativeDocumentSelectionRangeInput {
  "Start index of selection"
  start: NonNegativeInt!
  "End index of selection. If null then start === end."
  end: NonNegativeInt
}

type CollaborativeDocumentRecord implements Node {
  "Self-descriptive"
  id: ID!
  "User who created this record"
  creatorUserId: String!
  "Changes of the record"
  change: RevisionChangeset!
  "Selection before changeset is composed"
  beforeSelection: CollaborativeDocumentSelectionRange!
  "Selection after changeset is composed"
  afterSelection: CollaborativeDocumentSelectionRange!
}

input CollaborativeDocumentRecordInput {
  "Change to be made on the document"
  change: RevisionChangesetInput!
  "Selection before change is composed"
  beforeSelection: CollaborativeDocumentSelectionRangeInput!
  "Selection after change is composed"
  afterSelection: CollaborativeDocumentSelectionRangeInput!
}

type CollaborativeDocument {
  "Self-descriptive"
  id: ID!
  "Latest revision of this document."
  headDocument: RevisionChangeset!
  "Oldest available revision of this document. tailDocument.compose(...records) => headDocument"
  tailDocument: RevisionChangeset!
  "Document at specific revision. TODO use connection first, last or first?"
  document(revision: NonNegativeInt!): RevisionChangeset!
  "A list of records containing all changes made to the document"
  recordsConnection(
    first: PositiveInt
    after: NonNegativeInt
    last: PositiveInt
    before: NonNegativeInt
  ): CollaborativeDocumentRecordConnection!
}

input CreateCollaborativeDocumentInput {
  "Inital text of the document"
  initialText: String
}

type CollaborativeDocumentPatch {
  "New document record."
  newRecord: [CollaborativeDocumentRecord!]!
}

input CollaborativeDocumentPatchInput {
  "Insert new record on the document"
  insertRecord: CollaborativeDocumentRecordInput
}

type CollaborativeDocumentRecordConnection implements Connection {
  "Self descriptive"
  edges: [CollaborativeDocumentRecordEdge!]!
  "Self descriptive"
  pageInfo: PageInfo!
}

type CollaborativeDocumentRecordEdge implements Edge {
  "Self descriptive"
  node: CollaborativeDocumentRecord!
  "Self descriptive"
  cursor: String!
}

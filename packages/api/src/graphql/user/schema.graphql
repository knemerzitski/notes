################################ SignedInUser, PublicUser ################################

"""
User info that the user itself can access
"""
type SignedInUser {
  "Self-descriptive"
  id: ObjectID!
  "Self-descriptive"
  publicProfile: PublicUserProfile!
}

"""
User info that might be accessed by another user
"""
type PublicUser {
  "Self-descriptive"
  id: ObjectID!
  "Self-descriptive"
  profile: PublicUserProfile!
}

type PublicUserProfile {
  "User-friendly way to distinguish this user. Can be anything set by the user."
  displayName: String!
}

################################ Query signedInUser ################################

extend type Query {
  "Get currently signed in user"
  signedInUser: SignedInUser! @auth
}

################################ Subscription signedInUserEvents ################################

union SignedInUserMutations = UpdateUserDisplayNamePayload

type SignedInUserEventsPayload {
  "A list of mutations to be applied on currently signed in user"
  mutations: [SignedInUserMutations!]
}

extend type Subscription {
  "Subscribe to all events that are related to currently signed in user"
  signedInUserEvents: SignedInUserEventsPayload! @auth
}

################################ Mutation updateUserDisplayName ################################

input UpdateUserDisplayNameInput {
  "SignedInUser.id to update"
  userId: ObjectID!
  "New display name"
  displayName: String! @length(max: 20)
}

type UpdateUserDisplayNamePayload {
  "New updated display name"
  displayName: String!
  "User after setting new display name"
  signedInUser: SignedInUser!
}

extend type Mutation {
  updateUserDisplayName(input: UpdateUserDisplayNameInput): UpdateUserDisplayNamePayload!
    @auth
}

################################ Sign In ################################

"User info received from a authentication provider"
type AuthProviderUser {
  "User ID"
  id: ID!
  "User email. Not stored in database and only available with sign in payload."
  email: String!
}

input GoogleAuthInput {
  "JWT token"
  jwtToken: String!
}

union AuthInput = GoogleAuthInput

input SignInInput {
  auth: AuthInput!
}

type SignInPayload {
  "Signed in user"
  signedInUser: SignedInUser!
  "User info from auth provider"
  authProviderUser: AuthProviderUser!
}

extend type Mutation {
  "Returns null on a failed sign in"
  signIn(input: SignInInput!): SignInPayload
}

################################ Sign Out ################################

"Sign out of current session unless allSessions or sessionId is specified"
input SignOutInput {
  "Sign out all users. Cookies are cleared."
  allUsers: Boolean
  "Sign out a specific user. This has no effect if allUsers is true."
  userId: String
}

type SignOutPayload {
  "Signin out is successful"
  signedOut: Boolean!
  "Available SignedInUser.id's after sign out."
  availableUserIds: [ObjectID!]!
}

extend type Mutation {
  "Self-descriptive"
  signOut(input: SignOutInput): SignOutPayload!
}

################################ Sync Session Cookies ################################

input SyncSessionCookiesInput {
  "Available user IDs provided by the client"
  availableUserIds: [ObjectID!]!
}

type SyncSessionCookiesPayload {
  "User IDs available in http-only cookies. Any missing ids from input can are expired sessions."
  availableUserIds: [ObjectID!]!
}

extend type Mutation {
  "Synchronize http-only session cookies. Only sessions available both in client and server are kept."
  syncSessionCookies(input: SyncSessionCookiesInput!): SyncSessionCookiesPayload!
}
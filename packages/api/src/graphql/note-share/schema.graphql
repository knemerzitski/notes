type NoteShareLink {
  "Note is shareable by this id"
  id: ID!
  "Access to note through this link is read-only. Text cannot be modified. Cannot delete other users."
  readOnly: Boolean!
}

type NoteShareLinkPatch {
  "Share link ichanged"
  id: String
  "Link read-only was changed"
  readOnly: Boolean
  "Sharing has been deleted"
  deleted: Boolean
}

extend type Note {
  "Note is shared through the link"
  shareLink: NoteShareLink
}

extend type NotePatch {
  "Changes made to note sharing"
  shareLink: NoteShareLinkPatch
}

input CreateNoteShareLinkInput {
  "Note to be shared, Note.noteId"
  noteId: String!
  "Make access to note read-only"
  readOnly: Boolean!
}

type DeleteNoteShareLinkPayload {
  "Self-descriptive"
  shareLink: NoteShareLink!
  "Note that has been shared"
  note: Note!
}

extend type Mutation {
  "Share existing note"
  createNoteShareLink(input: CreateNoteShareLinkInput!): DeleteNoteShareLinkPayload! @auth
}

input DeleteShareNoteLinkInput {
  "Note to to stop sharing, Note.noteId"
  noteId: String!
}

type DeleteShareNoteLinkPayload {
  "Note with shareLink deleted"
  note: Note!
}

extend type Mutation {
  "Delete shared note. Anyone already linked to note still has access."
  deleteNoteShareLink(input: DeleteShareNoteLinkInput!): DeleteShareNoteLinkPayload! @auth
}

input LinkNoteInput {
  "Note to link with by NoteShareLink.id"
  shareId: String!
}

type LinkNotePayload {
  "Note that has been linked"
  note: Note!
}

extend type Mutation {
  "Add a link to an existing note for collaborative editing"
  linkNote(input: LinkNoteInput!): LinkNotePayload! @auth
}

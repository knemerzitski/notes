scalar Changeset

type RevisionChangeset {
  "Revision number"
  revision: NonNegativeInt!
  "A set of text changes"
  changeset: Changeset!
}

input RevisionChangesetInput {
  "Changeset applies to text at this revision"
  revision: NonNegativeInt!
  "New changes to be applied to text"
  changeset: Changeset! @length(max: 10000)
}

type CollabTextSelectionRange {
  "Start index of selection"
  start: NonNegativeInt!
  "End index of selection. If null then start === end."
  end: NonNegativeInt
}

input CollabTextSelectionRangeInput {
  "Start index of selection"
  start: NonNegativeInt!
  "End index of selection. If null then start === end."
  end: NonNegativeInt
}

type CollabTextRecord implements Node {
  "Self-descriptive"
  id: ID!
  "User who created this record"
  creatorUser: PublicUser!
  "Changes this record makes to the text"
  change: RevisionChangeset!
  "Selection before changeset is composed"
  beforeSelection: CollabTextSelectionRange!
  "Selection after changeset is composed"
  afterSelection: CollabTextSelectionRange!
  "Time when this record was created"
  createdAt: DateTime!
}

input CollabTextRecordInput {
  "Randomly generated string by client"
  generatedId: String! @length(max: 16)
  "Change to be made on the text"
  change: RevisionChangesetInput!
  "Selection before change is composed"
  beforeSelection: CollabTextSelectionRangeInput!
  "Selection after change is composed"
  afterSelection: CollabTextSelectionRangeInput!
}

type CollabText {
  "Self-descriptive"
  id: ID!
  "Latest revision of this text."
  headText: RevisionChangeset!
  "Oldest available revision of this text. tailText.compose(...records) => headText"
  tailText: RevisionChangeset!
  "Text at specific revision. Is a composition of all previous changesets."
  textAtRevision(revision: NonNegativeInt!): RevisionChangeset!
  "A list of records containing all changes made to the text"
  recordConnection(
    first: PositiveInt
    after: NonNegativeInt
    last: PositiveInt
    before: NonNegativeInt
  ): CollabTextRecordConnection!
  "Time when newest record was inserted"
  updatedAt: DateTime!
}

input CreateCollabTextInput {
  "Self-descriptive"
  initialText: String! @length(max: 100000)
}

type CollabTextRecordConnection implements Connection {
  "Records directly without edges"
  records: [CollabTextRecord!]!
  "Self descriptive"
  edges: [CollabTextRecordEdge!]!
  "Self descriptive"
  pageInfo: PageInfo!
}

type CollabTextRecordEdge implements Edge {
  "Self descriptive"
  node: CollabTextRecord!
  "Self descriptive"
  cursor: Cursor!
}

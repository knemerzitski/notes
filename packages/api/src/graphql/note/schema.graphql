type Note implements Node {
  "Self-descriptive"
  id: ID!
  "Note contents summary"
  title: CollaborativeDocument!
  "Contents of the note"
  content: CollaborativeDocument!
  "Note read-only state. Default is false."
  readOnly: Boolean
  "Note preferences such as background color"
  preferences: NotePreferences
}

type NotePatch {
  "Changed note title"
  title: CollaborativeDocumentPatch
  "Changes made to note content"
  content: CollaborativeDocumentPatch
  "Changed preferences"
  preferences: NotePreferencesPatch
}

input NotePatchInput {
  title: CollaborativeDocumentPatchInput
  content: CollaborativeDocumentPatchInput
  preferences: NotePreferencesPatchInput
}

input CreateNotePatchInput {
  "Initial note title"
  textTitle: String
  "Initial note content"
  textContent: String
  preferences: NotePreferencesPatchInput
}

type NotePreferences {
  "Note background color"
  backgroundColor: HexColorCode
}

type NotePreferencesPatch {
  "Changed note background color"
  backgroundColor: HexColorCode
}

input NotePreferencesPatchInput {
  backgroundColor: HexColorCode
}

type NoteConnection implements Connection {
  "Query notes directly without edges"
  notes: [Note!]!
  "Self descriptive"
  edges: [NoteEdge!]!
  "Self descriptive"
  pageInfo: PageInfo!
}

type NoteEdge implements Edge {
  "Self descriptive"
  node: Note!
  "Self descriptive"
  cursor: String!
}

extend type Query {
  "Paginate notes"
  notesConnection(
    last: NonNegativeInt
    before: String
    first: NonNegativeInt
    after: String
  ): NoteConnection! @auth
  "Get note by ID"
  note(id: ID!): Note! @auth
}

input CreateNoteInput {
  note: CreateNotePatchInput
}
type CreateNotePayload {
  "Created note"
  note: Note!
}
extend type Mutation {
  "Create a new note"
  createNote(input: CreateNoteInput!): CreateNotePayload @auth
}

input UpdateNoteInput {
  id: ID!
  patch: NotePatchInput
}
type UpdateNotePayload {
  "ID of updated note"
  id: ID!
  "Response patch to input"
  patch: NotePatch
}
extend type Mutation {
  "Update note"
  updateNote(input: UpdateNoteInput!): UpdateNotePayload! @auth
}

input DeleteNoteInput {
  id: ID!
}
type DeleteNotePayload {
  "Self-descriptive"
  deleted: Boolean!
}
extend type Mutation {
  "Delete note by ID"
  deleteNote(input: DeleteNoteInput!): DeleteNotePayload! @auth
}

type NoteCreatedPayload {
  "Created note info"
  note: Note!
}
extend type Subscription {
  "A new note was created"
  noteCreated: NoteCreatedPayload! @auth
}

type NoteUpdatedPayload {
  "ID of note that was updated"
  id: ID!
  "Changes made to the note"
  patch: NotePatch!
}

extend type Subscription {
  "An existing note was updated"
  noteUpdated: NoteUpdatedPayload! @auth
}

type NoteDeletedPayload {
  "ID of deleted note"
  id: ID!
}

extend type Subscription {
  "A note was deleted"
  noteDeleted: NoteDeletedPayload! @auth
}

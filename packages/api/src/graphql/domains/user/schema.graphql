################################ SignedInUser, PublicUser ################################

"""
User info that current user itself can access
"""
type SignedInUser {
  "Self-descriptive"
  id: ObjectID!
  "User data that might be accessed by other users"
  public: PublicUser!
}

type PublicUser {
  "Same value as SignedInUser.id"
  id: ObjectID!
  "Self-descriptive"
  profile: PublicUserProfile!
}

type PublicUserProfile {
  "Text to be displayed in UI to distinguish this user. Can be anything set by the user."
  displayName: String!
}

################################ Query signedInUser ################################

extend type Query {
  "Get currently signed in user"
  signedInUser: SignedInUser! @auth
}

################################ Subscription signedInUserEvents ################################

union SignedInUserMutation

type SignedInUserEventsPayload {
  "A list of mutations to be applied on currently signed in user"
  mutations: [SignedInUserMutation!]
}

extend type Subscription {
  "Subscribe to all events that are related to currently signed in user"
  signedInUserEvents: SignedInUserEventsPayload! @auth
}

################################ Mutation updateUserDisplayName ################################

input UpdateSignedInUserDisplayNameInput {
  "New display name"
  displayName: String! @length(max: 20)
}

type UpdateSignedInUserDisplayNamePayload {
  "New updated display name"
  displayName: String!
  "User after setting new display name"
  signedInUser: SignedInUser!
}

extend type Mutation {
  "Update user display name"
  updateSignedInUserDisplayName(
    input: UpdateSignedInUserDisplayNameInput!
  ): UpdateSignedInUserDisplayNamePayload! @auth
}

extend union SignedInUserMutation = UpdateSignedInUserDisplayNamePayload

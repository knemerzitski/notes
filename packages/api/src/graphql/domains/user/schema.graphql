################################ SignedInUser, PublicUser ################################

"""
User info that current user itself can access
"""
type SignedInUser {
  """
  Self-descriptive
  """
  id: ObjectID!
  """
  User data that might be accessed by other users
  """
  public: PublicUser!
}

"""
TODO desc
"""
type PublicUser {
  """
  Same value as SignedInUser.id
  """
  id: ObjectID!
  """
  Self-descriptive
  """
  profile: PublicUserProfile!
}

"""
TODO desc
"""
type PublicUserProfile {
  """
  Text to be displayed in UI to distinguish this user. Can be anything set by the user.
  """
  displayName: String!
}

################################ Query signedInUser ################################

"""
Contains no fields. Used by client schema for extending.
"""
input SignedInUserByInput @oneOf {
  """
  Get user by id
  """
  id: ObjectID
}

extend type Query {
  """
  Self-descriptive
  """
  signedInUser(by: SignedInUserByInput!): SignedInUser!
}

################################ Subscription signedInUserEvents ################################

"""
TODO desc
"""
union SignedInUserMutation

"""
TODO desc
"""
input SignedInUserEventsInput {
  """
  Authenticated user whose events are being subscribed to
  """
  authUser: SignedInUserByInput!
}

"""
TODO desc
"""
type SignedInUserEventsPayload {
  """
  A list of mutations to be applied on currently signed in user
  """
  mutations: [SignedInUserMutation!]
}

extend type Subscription {
  """
  Subscribe to all events related to a specific signed in user
  """
  signedInUserEvents(input: SignedInUserEventsInput!): SignedInUserEventsPayload!
}

################################ Mutation updateUserDisplayName ################################

"""
TODO desc
"""
input UpdateSignedInUserDisplayNameInput {
  """
  Authenticated user whose display name is changed
  """
  authUser: SignedInUserByInput!
  """
  New display name
  """
  displayName: String! @length(max: 20)
}

"""
TODO desc
"""
type UpdateSignedInUserDisplayNamePayload {
  """
  New updated display name
  """
  displayName: String!
  """
  User after setting new display name
  """
  signedInUser: SignedInUser!
}

extend type Mutation {
  """
  Update user display name
  """
  updateSignedInUserDisplayName(
    input: UpdateSignedInUserDisplayNameInput!
  ): UpdateSignedInUserDisplayNamePayload!
}

extend union SignedInUserMutation = UpdateSignedInUserDisplayNamePayload

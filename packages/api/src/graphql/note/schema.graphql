################################ Note ################################

type Note {
  "Self-descriptive"
  id: ObjectID!
}

type NotePatch {
  "This patch applies to Note.id"
  id: String!
  "True if Note was deleted"
  deleted: Boolean
}

################################ Create Note ################################

input CreateNoteInput {
  "Ignore this field. It's a placeholder until the type is extended"
  _: Boolean
}

type CreateNotePayload {
  note: Note!
}

extend type Mutation {
  "Create a new note"
  createNote(input: CreateNoteInput!): CreateNotePayload @auth
}

################################ Delete Note ################################


input DeleteNoteInput {
  "Note to be deleted by Note.id"
  noteId: ObjectID!
}

type DeleteNotePayload {
  "Affected Note.id"
  noteId: String!
  "If true then note was deleted."
  deleted: Boolean!
}

extend type Mutation {
  "Delete note permanently. Cannot be undone."
  deleteNote(input: DeleteNoteInput!): DeleteNotePayload! @auth
}

################################ Note Events Create/Update/Delete Subscriptions ################################

type NoteCreatedEvent {
  "Newly created link to a note"
  note: Note!
}

type NotePatchEvent {
  "Changes made to the note by patch"
  note: NotePatch
}

union NoteEvent = NoteCreatedEvent | NotePatchEvent

type NoteEventsPayload {
  "A list of Note events"
  events: [NoteEvent!]
}

extend type Subscription {
  "Subscribe to all note events related to current user"
  noteEvents: NoteEventsPayload! @auth
}
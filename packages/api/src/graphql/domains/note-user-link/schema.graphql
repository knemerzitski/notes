################################ UserNoteLink ################################

"""
Identifier for UserNoteLink.id, serializes to string
TODO delete this scalar
"""
scalar UserNoteLinkID

"""
Link (edge) between signed in user and note.
"""
type UserNoteLink implements Node {
  """
  Note.id:User.id
  """
  id: ID!
  """
  Self-descriptive
  """
  note: Note! @auth(userId: { parent: "userId" })
  """
  Self-descriptive
  """
  user: User!
  """
  User is owner of the note
  """
  isOwner: Boolean!
  """
  Access to note is read-only. User cannot modify the note.
  """
  readOnly: Boolean!

  """
  CollabText revision where this user history starts. User cannot have
  records past this revision.
  """
  historyTailRevision: Int!
}

extend type Note {
  """
  All users who can access the note
  """
  users: [UserNoteLink!]!
}

################################ Mutation createNote ################################

"""
TODO desc
"""
input CreateUserNoteLinkInput

extend input CreateNoteInput {
  userNoteLink: CreateUserNoteLinkInput
}

extend type CreateNotePayload {
  """
  Created link to a new note
  """
  userNoteLink: UserNoteLink!
}

################################ Mutation deleteNote ################################

extend input DeleteNoteInput {
  """
  Delete note from this user.
  If `userId` is not defined then `authUser` is used instead.
  """
  deleteUserId: ObjectID
}

extend type DeleteNotePayload {
  """
  Deleted UserNoteLink.id
  """
  userNoteLinkId: String
}

################################ Query User[noteLink,noteLinkConnection,noteLinkSearchConnection] ################################

"""
TODO desc
"""
type UserNoteLinkConnection implements Connection {
  """
  Notes directly without edges
  """
  noteLinks: [UserNoteLink!]!
  """
  Self descriptive
  """
  edges: [UserNoteLinkEdge!]!
  """
  Self descriptive
  """
  pageInfo: PageInfo!
}

"""
TODO desc
"""
type UserNoteLinkEdge implements Edge {
  """
  Self descriptive
  """
  node: UserNoteLink!
  """
  Self descriptive
  """
  cursor: Cursor!
}

"""
TODO desc
"""
input UserNoteLinkByInput @oneOf {
  """
  UserNoteLink.id
  """
  id: UserNoteLinkID
  """
  UserNoteLink.id
  """
  userNoteLinkId: UserNoteLinkID
  """
  userNoteLink.note.id
  """
  noteId: ObjectID
}

extend type User {
  """
  Link between user and note
  """
  noteLink(by: NoteByInput!): UserNoteLink! @auth(userId: { parent: "userId" })
  """
  Paginate note links by category. Default category is NoteCategory.DEFAULT
  """
  noteLinkConnection(
    first: NonNegativeInt
    after: ObjectID
    last: NonNegativeInt
    before: ObjectID
    category: NoteCategory
  ): UserNoteLinkConnection! @auth(userId: { parent: "userId" })
  """
  Search for note links by text
  """
  noteLinkSearchConnection(
    searchText: String!
    first: NonNegativeInt
    after: String
    last: NonNegativeInt
    before: String
  ): UserNoteLinkConnection! @auth(userId: { parent: "userId" })
}

################################ Mutation updateUserNoteLinkReadOnly ################################

"""
TODO desc
"""
input UpdateUserNoteLinkReadOnlyInput {
  """
  Authenticated user who updates noteLink readOnly.
  User must own the note.
  """
  authUser: UserByInput!
  """
  Target Note.id
  """
  note: NoteByInput!
  """
  User whose note `readOnly` value is updated. If not defined then `authUser` is used.
  """
  userId: ObjectID
  """
  New UserNoteLink.readOnly value for User.id
  """
  readOnly: Boolean!
}

"""
TODO desc
"""
type UpdateUserNoteLinkReadOnlyPayload {
  """
  New UserNoteLink.readOnly value
  """
  readOnly: Boolean!
  """
  Affected UserNoteLink
  """
  userNoteLink: UserNoteLink!
  """
  Related Note
  """
  note: Note!
}

extend type Mutation {
  """
  Change user note permissions
  """
  updateUserNoteLinkReadOnly(
    input: UpdateUserNoteLinkReadOnlyInput!
  ): UpdateUserNoteLinkReadOnlyPayload! @auth(userId: { args: "input.authUser" })
}

extend union SignedInUserMutation = UpdateUserNoteLinkReadOnlyPayload

################################ Mutation updateUserNoteLinkBackgroundColor ################################

extend type UserNoteLink {
  """
  Note preferences for visual appearance
  """
  preferences: NotePreferences
}

extend input CreateUserNoteLinkInput {
  preferences: NotePreferencesInput
}

"""
TODO desc
"""
type NotePreferences {
  """
  Note background color
  """
  backgroundColor: HexColorCode
}

"""
TODO desc
"""
input NotePreferencesInput {
  backgroundColor: HexColorCode
}

"""
TODO desc
"""
input UpdateUserNoteLinkBackgroundColorInput {
  """
  Authenticated user whose note background color is updated
  """
  authUser: UserByInput!
  """
  Target note
  """
  note: NoteByInput!
  """
  New background color value
  """
  backgroundColor: HexColorCode!
}

"""
TODO desc
"""
type UpdateUserNoteLinkBackgroundColorPayload {
  """
  Direct access to new background color
  """
  backgroundColor: HexColorCode!
  """
  UserNoteLink after new background color is applied
  """
  userNoteLink: UserNoteLink!
}

extend type Mutation {
  """
  Update note preferences backgroundColor
  """
  updateUserNoteLinkBackgroundColor(
    input: UpdateUserNoteLinkBackgroundColorInput!
  ): UpdateUserNoteLinkBackgroundColorPayload! @auth(userId: { args: "input.authUser" })
}

extend union SignedInUserMutation = UpdateUserNoteLinkBackgroundColorPayload

################################ Mutation trashUserNoteLink ################################

extend type UserNoteLink {
  """
  UserNoteLink is marked for deletion and will no longer be available after this date.
  """
  deletedAt: DateTime
}

"""
TODO desc
"""
input TrashUserNoteLinkInput {
  """
  Authenticated user whose note is trashed
  """
  authUser: UserByInput!
  """
  Note to be trashed by Note.id
  """
  note: NoteByInput!
}

"""
TODO desc
"""
type TrashUserNoteLinkPayload {
  """
  Note category before it was trashed
  """
  originalCategoryName: MovableNoteCategory!
  """
  Time when note is permanently deleted from trash
  """
  deletedAt: DateTime!
  """
  UserNoteLink after it's been trashed.
  """
  userNoteLink: UserNoteLink!
}

extend type Mutation {
  """
  Trash note by Note.id. It can still be recovered by moving it out of trash
  """
  trashUserNoteLink(input: TrashUserNoteLinkInput!): TrashUserNoteLinkPayload!
    @auth(userId: { args: "input.authUser" })
}

extend union SignedInUserMutation = TrashUserNoteLinkPayload

################################ Mutation moveUserNoteLink ################################

extend type UserNoteLink {
  """
  Category where note belongs
  """
  categoryName: NoteCategory!
}

extend input CreateUserNoteLinkInput {
  categoryName: NoteCategory
}

"""
All note categories
"""
enum NoteCategory {
  DEFAULT
  STICKY
  ARCHIVE
  TRASH
}

"""
Notes in these categories can be moved/reordered
"""
enum MovableNoteCategory {
  DEFAULT
  STICKY
  ARCHIVE
}

"""
TODO desc
"""
enum ListAnchorPosition {
  AFTER
  BEFORE
}

"""
Move notes between categories or within category using anchor note
"""
input NoteLocationInput {
  """
  Category where to put or keep the note.
  """
  categoryName: MovableNoteCategory!
  """
  Note.id to be defined as anchor.
  If anchor note doesn't exist then anchor is ignored and note is appended to the end.
  """
  anchorNoteId: ObjectID
  """
  How note is moved relative to anchor note
  """
  anchorPosition: ListAnchorPosition
}

"""
TODO desc
"""
type NoteLocation {
  """
  Note category after moving
  """
  categoryName: MovableNoteCategory!
  """
  Anchor note after moving
  """
  anchorUserNoteLink: UserNoteLink
  """
  How note is positioned relative to anchorNote. Default is BEFORE
  """
  anchorPosition: ListAnchorPosition
}

"""
TODO desc
"""
input MoveUserNoteLinkInput {
  """
  Authenticated user whose note is moved
  """
  authUser: UserByInput!
  """
  Note to be moved by Note.id
  """
  note: NoteByInput!
  """
  Specify how to move the note. Null location can be used to move note out of trash back to original category.
  """
  location: NoteLocationInput
}

"""
TODO desc
"""
type MoveUserNoteLinkPayload {
  """
  Note category before it was moved
  """
  prevCategoryName: NoteCategory!
  """
  How note was moved
  """
  location: NoteLocation!
  """
  UserNoteLink after the move
  """
  userNoteLink: UserNoteLink!
}

extend type Mutation {
  """
  Move note between categories or reorder within categories
  """
  moveUserNoteLink(input: MoveUserNoteLinkInput!): MoveUserNoteLinkPayload!
    @auth(userId: { args: "input.authUser" })
}

extend union SignedInUserMutation = MoveUserNoteLinkPayload

type UserProfile {
  "User-friendly way to distinguish this user. Can be anything set by the user."
  displayName: String!
}

"""
User information accessible by a query
"""
type User {
  "Self-descriptive"
  id: ID!
  "Self-descriptive"
  profile: UserProfile!
}

extend type Query {
  "Self-descriptive"
  user: User! @auth
}

"User info that is only available during sign in process and is not stored in database."
type AuthProviderUser {
  "User ID"
  id: ID!
  "User email. Not stored in database and only available after sign in."
  email: String!
}

enum AuthProvider {
  GOOGLE
}

input CredentialsInput {
  token: String!
}

input SignInInput {
  provider: AuthProvider!
  credentials: CredentialsInput!
}
type SignInPayload {
  "Signed in user."
  user: User!
  "User info available only during sign in from auth provider."
  authProviderUser: AuthProviderUser!
}
extend type Mutation {
  "Returns null on failed sign in."
  signIn(input: SignInInput!): SignInPayload
}

"Sign out of current session unless allSessions or sessionId is specified."
input SignOutInput {
  "Sign out all users. Cookies are cleared."
  allUsers: Boolean
  "Sign out a specific user. This has no effect if allUsers is true."
  userId: String
}
type SignOutPayload {
  "Signin out is successful"
  signedOut: Boolean!
}
extend type Mutation {
  "Returns signed out http-conly cookie session index or null if user was not signed in."
  signOut(input: SignOutInput): SignOutPayload!
}

input SyncSessionCookiesInput {
  "Available user IDs for client."
  availableUserIds: [String!]!
}

type SyncSessionCookiesPayload {
  "User IDs available in http-only cookies. Any missing ID from input can be considered as an expired session."
  availableUserIds: [String!]!
}
extend type Mutation {
  "Call when session cookies are in invalid state. Server will fix cookies by setting new headers."
  syncSessionCookies(input: SyncSessionCookiesInput!): SyncSessionCookiesPayload!
}

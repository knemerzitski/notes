# eslint-disable-next-line @graphql-eslint/strict-id-in-types
type OrderedListItem {
  "A ordered list item order."
  order: String!
}

input OrderedListItemInput {
  "A ordered list item order."
  order: String!
}

"""
Note preferences
TODO add color?
""" # eslint-disable-next-line @graphql-eslint/strict-id-in-types
type NotePreferences {
  "How is note ordered in a list"
  list: OrderedListItem!
}

type Note implements Node {
  "Note unique ID"
  id: ID!
  "Note title"
  title: String
  "Note text contents"
  content: String
  "Note preferences"
  preferences: NotePreferences!
  "What user can do with this note."
  permissions: Permission!
}

# eslint-disable-next-line @graphql-eslint/strict-id-in-types
type NoteConnection implements Connection {
  "Self descriptive"
  notes: [Note!]
  "Self descriptive"
  edges: [NoteEdge!]!
  "Self descriptive"
  pageInfo: PageInfo!
}

# eslint-disable-next-line @graphql-eslint/strict-id-in-types
type NoteEdge implements Edge {
  "Self descriptive"
  node: Note!
  "Self descriptive"
  cursor: String!
}

# eslint-disable-next-line @graphql-eslint/strict-id-in-types, @graphql-eslint/no-unreachable-types
input NotePreferencesInput {
  "Ordered list related configuration"
  list: OrderedListItemInput!
}

input CreateNoteInput {
  title: String
  content: String
  preferences: NotePreferencesInput
}

input UpdateNoteInput {
  id: ID!
  title: String
  content: String
  preferences: NotePreferencesInput
}

"""
Note shared by a signed in user. Note is accessible by a link generated from an ID.
"""
type SharedNote {
  "Self descriptive"
  id: ID!
  "Note that is being shared"
  note: Note!
  "When note expires. Null when never expires"
  expireAt: Date
}

"Permissions to access shared note for a authenticated user"
input SharedNoteUserAuthorizationInput {
  actions: PermissionInput!
  "How many different users can access this shared note before it becomes unavailable. Default value unlimited."
  inviteCount: PositiveInt
}

input SharedNoteAuthorizationInput {
  "Permission for a guest user. If not defined then guest is not allowed to access this note."
  guest: PermissionInput
  "Permissions for any authenticated user."
  user: SharedNoteUserAuthorizationInput!
}

input SharedNoteInput {
  "Note ID to be used in shared link generation"
  id: ID!
  authorization: SharedNoteAuthorizationInput!
  expireAt: Date
}

"""
Note shared by an unauthenticated user.
This note can be edited by anyone with a link, cannot be deleted manually
and will always eventually expire.
"""
type GuestSharedNote {
  "Self descriptive"
  id: ID!
  "Shared note"
  note: Note!
  "ISO formatted expiration date. Must always expire"
  expireAt: String!
}

extend type Query {
  "All notes that are accessible by current user"
  notesConnection(first: Int!, after: String): NoteConnection! @auth
  "Get note by ID that is accessible by current user"
  note(id: ID!): Note @auth
  "Get note by a shared note ID"
  sharedNote(id: ID!): Note!
}

extend type Mutation {
  """
  Create a new note to current user.
  If order is not specified then it's added to the beginning of the list.
  """
  createNote(input: CreateNoteInput!): Note @auth
  "Update note that current user has write access."
  updateNote(input: UpdateNoteInput!): Note @auth
  "Delete note by ID"
  deleteNote(id: ID!): Boolean! @auth

  "Makes an existing note shared by a link"
  createSharedNote(input: SharedNoteInput!): SharedNote @auth
  "Update permissions or an expiration date of an existing shared note. You must be creator of the shared note."
  updateSharedNote(input: SharedNoteInput!): SharedNote @auth
  "Delete shared node by ID. You must be creator of the shared note."
  deleteSharedNote(id: ID!): SharedNote @auth

  "Share note as an unauthenticated user (guest)"
  createGuestSharedNote(input: CreateNoteInput!): GuestSharedNote!
}

extend type Subscription {
  "A new note was created"
  noteCreated: Note! @auth
  "An existing note was updated"
  noteUpdated: Note! @auth
  "A note was deleted"
  noteDeleted: ID! @auth
}

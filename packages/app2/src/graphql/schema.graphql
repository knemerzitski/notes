"""
The @client directive allows you to resolve client-only data alongside your server data.
These fields are not sent to the GraphQL server.
"""
directive @client on FIELD

"""
The @persist directive will persist operation in cache until it has received a response from server.
When app is reopened, all unfinished mutations are resumed.
"""
directive @persist on FIELD

"""
Operations with @noauth directive will not be tied to any user. They will be sent as if user is not signed in.
"""
directive @noauth on FIELD


union SerializeKey = Int | Float | String | Boolean | ID

"""
You can indicate requests that should be serialized by providing a serialization key.
All requests with the same serialization key will be queued behind one another in the order they are executed.
The key can be expressed via the @serialize(key: â€¦) directive. The directive takes a key argument of type List.
"""
directive @serialize(key: [SerializeKey!]!) on FIELD

################################ Query ongoingOperations ################################

type ApolloOperation {
  "UUIDv4 generated by the client"
  id: ID!
  "Unique operation name in client"
  operationName: String!
  "JSON stringified DocumentNode"
  query: String!
  "JSON stringified Record"
  variables: String!
  "JSON stringified context without cache."
  context: String!
}

extend type Query {
  "Apollo Client operations that haven't received a response from the server"
  ongoingOperations: [ApolloOperation!]!
  "Apollo Client operation that hasn't received a response from the server"
  ongoingOperation(id: ID!): ApolloOperation
}
